import 'dart:io';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:path/path.dart' as path;
import 'package:crypto/crypto.dart';
import '../config/app_config.dart';

class CloudinaryService {
  // Cloudinary Configuration - ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Environment Variables
  static String get _cloudName => CloudinaryConfig.cloudName;
  static String get _apiKey => CloudinaryConfig.apiKey;
  static String get _apiSecret => CloudinaryConfig.apiSecret;
  
  static const String _baseUrl = 'https://api.cloudinary.com/v1_1';
  
  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloudinary API
  static String _generateSignature(Map<String, dynamic> params, String apiSecret) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á params ‡πÅ‡∏•‡∏∞‡∏•‡∏ö file ‡∏≠‡∏≠‡∏Å
    final Map<String, dynamic> paramsToSign = Map<String, dynamic>.from(params);
    paramsToSign.remove('file');
    paramsToSign.remove('api_key'); // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° api_key ‡πÉ‡∏ô signature
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö keys ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    final sortedKeys = paramsToSign.keys.toList()..sort();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á parameter string
    final paramPairs = sortedKeys
        .map((key) => '$key=${paramsToSign[key]}')
        .toList();
    
    final paramString = paramPairs.join('&');
    
    // String to sign ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ API secret ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
    final stringToSign = paramString + apiSecret;
    
    print('üîê String to sign: $stringToSign');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á SHA1 hash
    final bytes = utf8.encode(stringToSign);
    final digest = sha1.convert(bytes);
    
    return digest.toString();
  }

  /// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary
  static Future<String?> uploadImage(File imageFile, {String? fileName}) async {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ credentials
    if (_cloudName == 'YOUR_CLOUD_NAME_HERE' || 
        _apiSecret == 'USE_BACKEND_SERVER_FOR_API_SECRET' ||
        _cloudName.isEmpty || _apiSecret.isEmpty) {
      throw Exception('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cloudinary credentials ‡πÉ‡∏ô .env file\n'
          'ÔøΩ ‡∏î‡∏π .env.example ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
    }
    
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
      fileName ??= 'product_${DateTime.now().millisecondsSinceEpoch}';
      
      print('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ: $fileName');

      // Parameters ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloudinary (timestamp ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô seconds ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà milliseconds)
      final timestamp = (DateTime.now().millisecondsSinceEpoch ~/ 1000).toString();
      final params = {
        'timestamp': timestamp,
        'public_id': fileName,
        'folder': 'products', // ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå products
      };

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á signature
      final signature = _generateSignature(params, _apiSecret);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á multipart request
      final request = http.MultipartRequest(
        'POST',
        Uri.parse('$_baseUrl/$_cloudName/image/upload'),
      );
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° parameters
      request.fields.addAll({
        'timestamp': timestamp,
        'public_id': fileName,
        'folder': 'products',
        'api_key': _apiKey,
        'signature': signature,
      });
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      request.files.add(await http.MultipartFile.fromPath(
        'file',
        imageFile.path,
        filename: path.basename(imageFile.path),
      ));

      // ‡∏™‡πà‡∏á request
      final streamedResponse = await request.send();
      final response = await http.Response.fromStream(streamedResponse);

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final publicUrl = data['secure_url'] as String;
        
        print('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $publicUrl');
        return publicUrl;
      } else {
        print('‚ùå HTTP ${response.statusCode}: ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
        print('Response: ${response.body}');
        
        // ‡πÅ‡∏õ‡∏•‡∏á error response ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
        try {
          final errorData = json.decode(response.body);
          if (errorData['error'] != null) {
            final errorMsg = errorData['error']['message'] ?? 'Unknown error';
            print('üîç Error details: $errorMsg');
            
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô signature error ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            if (errorMsg.contains('Invalid Signature')) {
              print('üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cloud Name ‡πÅ‡∏•‡∏∞ API Secret ‡πÉ‡∏ô cloudinary_service.dart');
            }
          }
        } catch (parseError) {
          print('üîç Raw error response: ${response.body}');
        }
        
        return null;
      }
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î: $e');
      return null;
    }
  }

  /// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary
  static Future<List<String>> uploadMultipleImages(List<File> imageFiles) async {
    List<String> uploadedUrls = [];
    
    print('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î ${imageFiles.length} ‡∏£‡∏π‡∏õ...');
    
    for (int i = 0; i < imageFiles.length; i++) {
      final file = imageFiles[i];
      final fileName = 'product_${DateTime.now().millisecondsSinceEpoch}_${i + 1}';
      
      print('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${i + 1}/${imageFiles.length}: $fileName');
      
      final url = await uploadImage(file, fileName: fileName);
      if (url != null) {
        uploadedUrls.add(url);
        print('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${i + 1} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } else {
        print('‚ùå ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${i + 1} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      }
      
      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ hit rate limit
      if (i < imageFiles.length - 1) {
        await Future.delayed(Duration(milliseconds: 500));
      }
    }
    
    print('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ${uploadedUrls.length}/${imageFiles.length} ‡∏£‡∏π‡∏õ');
    return uploadedUrls;
  }

  /// ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Cloudinary
  static Future<bool> deleteImage(String publicId) async {
    try {
      print('üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: $publicId');
      
      final timestamp = DateTime.now().millisecondsSinceEpoch.toString();
      final params = {
        'timestamp': timestamp,
        'public_id': publicId,
      };

      final signature = _generateSignature(params, _apiSecret);

      final response = await http.post(
        Uri.parse('$_baseUrl/$_cloudName/image/destroy'),
        body: {
          'timestamp': timestamp,
          'public_id': publicId,
          'api_key': _apiKey,
          'signature': signature,
        },
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        
        if (data['result'] == 'ok') {
          print('‚úÖ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          return true;
        } else {
          print('‚ùå ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${data['result']}');
          return false;
        }
      } else {
        print('‚ùå ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: $e');
      return false;
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á optimized URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  static String optimizeImageUrl(String originalUrl, {
    int? width,
    int? height,
    String quality = 'auto',
    String format = 'auto',
  }) {
    try {
      // ‡πÅ‡∏¢‡∏Å public_id ‡∏à‡∏≤‡∏Å URL
      final uri = Uri.parse(originalUrl);
      final pathSegments = uri.pathSegments;
      
      if (pathSegments.length < 3) return originalUrl;
      
      final cloudName = pathSegments[1];
      final version = pathSegments[2];
      final publicIdWithExtension = pathSegments.skip(3).join('/');
      final publicId = publicIdWithExtension.split('.').first;
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á transformation parameters
      final transformations = <String>[];
      
      if (width != null) transformations.add('w_$width');
      if (height != null) transformations.add('h_$height');
      transformations.add('q_$quality');
      transformations.add('f_$format');
      transformations.add('c_fill'); // crop to fill the dimensions
      
      final transformString = transformations.join(',');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á optimized URL
      return 'https://res.cloudinary.com/$cloudName/image/upload/$transformString/$version/$publicId';
    } catch (e) {
      print('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ optimize URL ‡πÑ‡∏î‡πâ: $e');
      return originalUrl;
    }
  }

  /// ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
  static String getFileSize(File file) {
    final bytes = file.lengthSync();
    
    if (bytes < 1024) {
      return '$bytes B';
    } else if (bytes < 1024 * 1024) {
      return '${(bytes / 1024).toStringAsFixed(1)} KB';
    } else {
      return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} MB';
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
  static bool get isConfigured {
    return _cloudName != 'YOUR_CLOUD_NAME_HERE' && 
           _apiSecret != 'USE_BACKEND_SERVER_FOR_API_SECRET' &&
           _cloudName.isNotEmpty && _apiSecret.isNotEmpty;
  }

  /// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ä‡∏ó‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudinary (‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå chat)
  static Future<String?> uploadChatImage(File imageFile, {String? fileName}) async {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ credentials
    if (_cloudName == 'YOUR_CLOUD_NAME_HERE' || 
        _apiSecret == 'USE_BACKEND_SERVER_FOR_API_SECRET' ||
        _cloudName.isEmpty || _apiSecret.isEmpty) {
      throw Exception('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cloudinary credentials ‡πÉ‡∏ô .env file\n'
          'ÔøΩ ‡∏î‡∏π .env.example ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
    }
    
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
      fileName ??= 'chat_${DateTime.now().millisecondsSinceEpoch}';
      
      print('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ä‡∏ó: $fileName');

      // Parameters ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloudinary (timestamp ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô seconds ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà milliseconds)
      final timestamp = (DateTime.now().millisecondsSinceEpoch ~/ 1000).toString();
      final params = {
        'timestamp': timestamp,
        'public_id': fileName,
        'folder': 'chat', // ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå chat ‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å products
      };

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á signature
      final signature = _generateSignature(params, _apiSecret);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á multipart request
      final request = http.MultipartRequest(
        'POST',
        Uri.parse('$_baseUrl/$_cloudName/image/upload'),
      );
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° parameters
      request.fields.addAll({
        'timestamp': timestamp,
        'public_id': fileName,
        'folder': 'chat',
        'api_key': _apiKey,
        'signature': signature,
      });
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      request.files.add(await http.MultipartFile.fromPath(
        'file',
        imageFile.path,
        filename: path.basename(imageFile.path),
      ));

      // ‡∏™‡πà‡∏á request
      final streamedResponse = await request.send();
      final response = await http.Response.fromStream(streamedResponse);

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final publicUrl = data['secure_url'] as String;
        
        print('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ä‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $publicUrl');
        return publicUrl;
      } else {
        print('‚ùå HTTP ${response.statusCode}: ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ä‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
        print('Response: ${response.body}');
        
        // ‡πÅ‡∏õ‡∏•‡∏á error response ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
        try {
          final errorData = json.decode(response.body);
          if (errorData['error'] != null) {
            final errorMsg = errorData['error']['message'] ?? 'Unknown error';
            print('üîç Error details: $errorMsg');
            
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô signature error ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            if (errorMsg.contains('Invalid Signature')) {
              print('üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cloud Name ‡πÅ‡∏•‡∏∞ API Secret ‡πÉ‡∏ô cloudinary_service.dart');
            }
          }
        } catch (parseError) {
          print('üîç Raw error response: ${response.body}');
        }
        
        return null;
      }
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ä‡∏ó: $e');
      return null;
    }
  }
}
