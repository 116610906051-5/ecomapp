import 'dart:io';
import 'package:firebase_storage/firebase_storage.dart';

class FirebaseImageService {
  static final FirebaseStorage _storage = FirebaseStorage.instance;

  /// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Storage
  static Future<String?> uploadImage(File imageFile) async {
    try {
      print('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Storage...');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
      String fileName = 'product_${DateTime.now().millisecondsSinceEpoch}_${imageFile.path.split('/').last}';
      
      // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Firebase Storage
      Reference ref = _storage.ref().child('product_images').child(fileName);
      
      // ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
      UploadTask uploadTask = ref.putFile(imageFile);
      
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
      TaskSnapshot snapshot = await uploadTask;
      
      // ‡∏£‡∏±‡∏ö URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
      String downloadUrl = await snapshot.ref.getDownloadURL();
      
      print('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $downloadUrl');
      return downloadUrl;
      
    } catch (e) {
      print('‚ùå ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e');
      return null;
    }
  }

  /// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Storage
  static Future<List<String>> uploadMultipleImages(List<File> imageFiles) async {
    List<String> downloadUrls = [];
    
    try {
      print('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î ${imageFiles.length} ‡∏£‡∏π‡∏õ...');
      
      for (int i = 0; i < imageFiles.length; i++) {
        File imageFile = imageFiles[i];
        print('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ ${i + 1}/${imageFiles.length}: ${imageFile.path.split('/').last}');
        
        String? downloadUrl = await uploadImage(imageFile);
        if (downloadUrl != null) {
          downloadUrls.add(downloadUrl);
          print('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${i + 1} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } else {
          print('‚ùå ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${i + 1} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
        }
      }
      
      print('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ${downloadUrls.length}/${imageFiles.length} ‡∏£‡∏π‡∏õ');
      return downloadUrls;
      
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î: $e');
      return downloadUrls;
    }
  }

  /// ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Firebase Storage
  static Future<bool> deleteImage(String imageUrl) async {
    try {
      print('üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: $imageUrl');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Reference ‡∏à‡∏≤‡∏Å URL
      Reference ref = _storage.refFromURL(imageUrl);
      
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
      await ref.delete();
      
      print('‚úÖ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
      
    } catch (e) {
      print('‚ùå ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e');
      return false;
    }
  }

  /// ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Firebase Storage
  static Future<List<bool>> deleteMultipleImages(List<String> imageUrls) async {
    List<bool> results = [];
    
    try {
      print('üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö ${imageUrls.length} ‡∏£‡∏π‡∏õ...');
      
      for (int i = 0; i < imageUrls.length; i++) {
        String imageUrl = imageUrls[i];
        print('üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${i + 1}/${imageUrls.length}');
        
        bool success = await deleteImage(imageUrl);
        results.add(success);
      }
      
      int successCount = results.where((result) => result).length;
      print('‚úÖ ‡∏•‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ${successCount}/${imageUrls.length} ‡∏£‡∏π‡∏õ');
      
      return results;
      
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö: $e');
      return results;
    }
  }

  /// ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
  static String getFileSize(File file) {
    final bytes = file.lengthSync();
    
    if (bytes < 1024) {
      return '$bytes B';
    } else if (bytes < 1024 * 1024) {
      return '${(bytes / 1024).toStringAsFixed(1)} KB';
    } else {
      return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} MB';
    }
  }
}
