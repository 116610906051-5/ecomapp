import 'dart:io';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:path/path.dart' as path;
import 'package:http_parser/http_parser.dart' as parser;

class GoogleDriveOAuthService {
  // ‚úÖ OAuth2 Client ID ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß
  static const String _clientId = '9476930773-mq0jh63bu4739gdg33jm8mhr7on9ksj1.apps.googleusercontent.com';
  
  // ‚úÖ Folder ID ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≤‡∏Å Google Drive link)  
  static const String _productImagesFolderId = '1utmu9bohmbfeX5dn-utC7UA5ldZG_zi-';
  
  // OAuth2 Configuration
  static const String _redirectUri = 'urn:ietf:wg:oauth:2.0:oob';
  static const List<String> _scopes = [
    'https://www.googleapis.com/auth/drive.file'
  ];
  
  // URLs
  static const String _authUrl = 'https://accounts.google.com/o/oauth2/v2/auth';
  static const String _tokenUrl = 'https://oauth2.googleapis.com/token';
  static const String _uploadUrl = 'https://www.googleapis.com/upload/drive/v3/files';
  
  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö Access Token
  static String? _accessToken;
  static String? _refreshToken;
  static DateTime? _tokenExpiry;

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Authorization URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  static String getAuthorizationUrl() {
    final params = {
      'client_id': _clientId,
      'redirect_uri': _redirectUri,
      'scope': _scopes.join(' '),
      'response_type': 'code',
      'access_type': 'offline',
      'prompt': 'consent',
    };
    
    final query = params.entries
        .map((e) => '${Uri.encodeComponent(e.key)}=${Uri.encodeComponent(e.value)}')
        .join('&');
    
    return '$_authUrl?$query';
  }

  /// ‡πÅ‡∏•‡∏Å Authorization Code ‡πÄ‡∏õ‡πá‡∏ô Access Token
  static Future<bool> exchangeCodeForToken(String authCode) async {
    try {
      print('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏Å Authorization Code ‡πÄ‡∏õ‡πá‡∏ô Access Token...');
      
      final response = await http.post(
        Uri.parse(_tokenUrl),
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: {
          'client_id': _clientId,
          'code': authCode,
          'grant_type': 'authorization_code',
          'redirect_uri': _redirectUri,
        },
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        _accessToken = data['access_token'];
        _refreshToken = data['refresh_token'];
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        final expiresIn = data['expires_in'] as int;
        _tokenExpiry = DateTime.now().add(Duration(seconds: expiresIn - 60)); // ‡∏•‡∏ö 60 ‡∏ß‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        
        print('‚úÖ ‡πÑ‡∏î‡πâ Access Token ‡πÅ‡∏•‡πâ‡∏ß');
        return true;
      } else {
        print('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏î‡πâ Access Token: ${response.body}');
        return false;
      }
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å token: $e');
      return false;
    }
  }

  /// ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ Access Token ‡∏î‡πâ‡∏ß‡∏¢ Refresh Token
  static Future<bool> refreshAccessToken() async {
    if (_refreshToken == null) {
      print('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Refresh Token');
      return false;
    }

    try {
      print('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ Access Token...');
      
      final response = await http.post(
        Uri.parse(_tokenUrl),
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: {
          'client_id': _clientId,
          'refresh_token': _refreshToken!,
          'grant_type': 'refresh_token',
        },
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        _accessToken = data['access_token'];
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡∏°‡πà
        final expiresIn = data['expires_in'] as int;
        _tokenExpiry = DateTime.now().add(Duration(seconds: expiresIn - 60));
        
        print('‚úÖ ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ Access Token ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
        return true;
      } else {
        print('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ token: ${response.body}');
        return false;
      }
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ token: $e');
      return false;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ token ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  static Future<bool> ensureValidToken() async {
    if (_accessToken == null) {
      print('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Access Token - ‡∏ï‡πâ‡∏≠‡∏á authorize ‡∏Å‡πà‡∏≠‡∏ô');
      return false;
    }

    if (_tokenExpiry != null && DateTime.now().isAfter(_tokenExpiry!)) {
      print('‚ö†Ô∏è Access Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏...');
      return await refreshAccessToken();
    }

    return true;
  }

  /// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive
  static Future<String?> uploadImage(File imageFile, {String? fileName}) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
      if (!await ensureValidToken()) {
        return null;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
      fileName ??= 'product_${DateTime.now().millisecondsSinceEpoch}_${path.basename(imageFile.path)}';
      
      print('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ: $fileName');

      // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
      final bytes = await imageFile.readAsBytes();

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
      final metadata = {
        'name': fileName,
        'parents': [_productImagesFolderId],
      };

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á multipart request
      final request = http.MultipartRequest('POST', Uri.parse('$_uploadUrl?uploadType=multipart'));
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° Authorization header
      request.headers['Authorization'] = 'Bearer $_accessToken';
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° metadata
      request.files.add(http.MultipartFile.fromString(
        'metadata',
        json.encode(metadata),
        contentType: parser.MediaType('application', 'json'),
      ));
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      request.files.add(http.MultipartFile.fromBytes(
        'media',
        bytes,
        filename: fileName,
        contentType: parser.MediaType('image', path.extension(imageFile.path).substring(1)),
      ));

      // ‡∏™‡πà‡∏á request
      final streamedResponse = await request.send();
      final response = await http.Response.fromStream(streamedResponse);

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        final fileId = responseData['id'];
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô public
        await makeFilePublic(fileId);
        
        final publicUrl = 'https://drive.google.com/uc?id=$fileId';
        print('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $publicUrl');
        return publicUrl;
      } else {
        print('‚ùå ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.statusCode}');
        print('Error: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î: $e');
      return null;
    }
  }

  /// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô public
  static Future<bool> makeFilePublic(String fileId) async {
    try {
      if (!await ensureValidToken()) {
        return false;
      }

      final response = await http.post(
        Uri.parse('https://www.googleapis.com/drive/v3/files/$fileId/permissions'),
        headers: {
          'Authorization': 'Bearer $_accessToken',
          'Content-Type': 'application/json',
        },
        body: json.encode({
          'role': 'reader',
          'type': 'anyone',
        }),
      );

      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ public: $e');
      return false;
    }
  }

  /// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ
  static Future<List<String>> uploadMultipleImages(List<File> imageFiles) async {
    List<String> uploadedUrls = [];
    
    print('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î ${imageFiles.length} ‡∏£‡∏π‡∏õ...');
    
    for (int i = 0; i < imageFiles.length; i++) {
      final file = imageFiles[i];
      final fileName = 'product_${DateTime.now().millisecondsSinceEpoch}_${i + 1}.${path.extension(file.path).substring(1)}';
      
      final url = await uploadImage(file, fileName: fileName);
      if (url != null) {
        uploadedUrls.add(url);
        print('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${i + 1} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } else {
        print('‚ùå ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà ${i + 1} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      }
    }
    
    print('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ${uploadedUrls.length}/${imageFiles.length} ‡∏£‡∏π‡∏õ');
    return uploadedUrls;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ authorize
  static bool get isAuthorized => _accessToken != null;

  /// ‡∏•‡πâ‡∏≤‡∏á token (logout)
  static void clearTokens() {
    _accessToken = null;
    _refreshToken = null;
    _tokenExpiry = null;
    print('üîÑ ‡∏•‡πâ‡∏≤‡∏á tokens ‡πÅ‡∏•‡πâ‡∏ß');
  }
}
