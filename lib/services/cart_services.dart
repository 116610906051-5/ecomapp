import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/cart.dart';
import '../models/product.dart';

class CartService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final CollectionReference _cartsRef = _firestore.collection('carts');

  /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  static Future<void> addToCart({
    required String userId,
    required Product product,
    int quantity = 1,
    String? selectedColor,
    String? selectedSize,
  }) async {
    try {
      print('üõí Adding to cart: ${product.name} x$quantity');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final cartDoc = await _cartsRef.doc(userId).get();
      
      if (cartDoc.exists) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        final cart = Cart.fromMap(cartDoc.data() as Map<String, dynamic>);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏¥‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        final existingItemIndex = cart.items.indexWhere((item) =>
          item.productId == product.id &&
          item.selectedColor == selectedColor &&
          item.selectedSize == selectedSize
        );
        
        List<CartItem> updatedItems = List.from(cart.items);
        
        if (existingItemIndex >= 0) {
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
          updatedItems[existingItemIndex] = updatedItems[existingItemIndex].copyWith(
            quantity: updatedItems[existingItemIndex].quantity + quantity,
          );
        } else {
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
          final cartItem = CartItem(
            id: '${product.id}_${DateTime.now().millisecondsSinceEpoch}',
            productId: product.id,
            productName: product.name,
            productImage: product.imageUrls.isNotEmpty ? product.imageUrls.first : '',
            price: product.price,
            quantity: quantity,
            selectedColor: selectedColor,
            selectedSize: selectedSize,
          );
          updatedItems.add(cartItem);
        }
        
        final updatedCart = cart.copyWith(
          items: updatedItems,
          updatedAt: DateTime.now(),
        );
        
        await _cartsRef.doc(userId).update(updatedCart.toMap());
      } else {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        final cartItem = CartItem(
          id: '${product.id}_${DateTime.now().millisecondsSinceEpoch}',
          productId: product.id,
          productName: product.name,
          productImage: product.imageUrls.isNotEmpty ? product.imageUrls.first : '',
          price: product.price,
          quantity: quantity,
          selectedColor: selectedColor,
          selectedSize: selectedSize,
        );
        
        final cart = Cart(
          id: userId,
          userId: userId,
          items: [cartItem],
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        );
        
        await _cartsRef.doc(userId).set(cart.toMap());
      }
      
      print('‚úÖ Added to cart successfully');
    } catch (e) {
      print('‚ùå Error adding to cart: $e');
      throw Exception('Failed to add to cart: $e');
    }
  }

  /// ‡∏£‡∏±‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  static Future<Cart?> getCart(String userId) async {
    try {
      final cartDoc = await _cartsRef.doc(userId).get();
      
      if (cartDoc.exists) {
        return Cart.fromMap(cartDoc.data() as Map<String, dynamic>);
      }
      
      return null;
    } catch (e) {
      print('‚ùå Error getting cart: $e');
      throw Exception('Failed to get cart: $e');
    }
  }

  /// Stream ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  static Stream<Cart?> getCartStream(String userId) {
    return _cartsRef.doc(userId).snapshots().map((snapshot) {
      if (snapshot.exists) {
        return Cart.fromMap(snapshot.data() as Map<String, dynamic>);
      }
      return null;
    });
  }

  /// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  static Future<void> updateItemQuantity({
    required String userId,
    required String itemId,
    required int newQuantity,
  }) async {
    try {
      print('üîÑ Updating item quantity: $itemId -> $newQuantity');
      
      final cartDoc = await _cartsRef.doc(userId).get();
      if (!cartDoc.exists) return;
      
      final cart = Cart.fromMap(cartDoc.data() as Map<String, dynamic>);
      
      final updatedItems = cart.items.map((item) {
        if (item.id == itemId) {
          return item.copyWith(quantity: newQuantity);
        }
        return item;
      }).toList();
      
      final updatedCart = cart.copyWith(
        items: updatedItems,
        updatedAt: DateTime.now(),
      );
      
      await _cartsRef.doc(userId).update(updatedCart.toMap());
      print('‚úÖ Item quantity updated');
    } catch (e) {
      print('‚ùå Error updating item quantity: $e');
      throw Exception('Failed to update item quantity: $e');
    }
  }

  /// ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  static Future<void> removeFromCart({
    required String userId,
    required String itemId,
  }) async {
    try {
      print('üóëÔ∏è Removing item from cart: $itemId');
      
      final cartDoc = await _cartsRef.doc(userId).get();
      if (!cartDoc.exists) return;
      
      final cart = Cart.fromMap(cartDoc.data() as Map<String, dynamic>);
      
      final updatedItems = cart.items.where((item) => item.id != itemId).toList();
      
      if (updatedItems.isEmpty) {
        // ‡∏•‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        await _cartsRef.doc(userId).delete();
      } else {
        final updatedCart = cart.copyWith(
          items: updatedItems,
          updatedAt: DateTime.now(),
        );
        
        await _cartsRef.doc(userId).update(updatedCart.toMap());
      }
      
      print('‚úÖ Item removed from cart');
    } catch (e) {
      print('‚ùå Error removing from cart: $e');
      throw Exception('Failed to remove from cart: $e');
    }
  }

  /// ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  static Future<void> clearCart(String userId) async {
    try {
      print('üóëÔ∏è Clearing cart for user: $userId');
      await _cartsRef.doc(userId).delete();
      print('‚úÖ Cart cleared');
    } catch (e) {
      print('‚ùå Error clearing cart: $e');
      throw Exception('Failed to clear cart: $e');
    }
  }

  /// ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  static Future<int> getCartItemCount(String userId) async {
    try {
      final cart = await getCart(userId);
      return cart?.totalItems ?? 0;
    } catch (e) {
      print('‚ùå Error getting cart item count: $e');
      return 0;
    }
  }

  /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  static Future<double> getCartTotal(String userId) async {
    try {
      final cart = await getCart(userId);
      return cart?.totalAmount ?? 0.0;
    } catch (e) {
      print('‚ùå Error getting cart total: $e');
      return 0.0;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å
  static Future<bool> validateCartItems(String userId) async {
    try {
      final cart = await getCart(userId);
      if (cart == null) return true;
      
      // TODO: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ return true ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
      return true;
    } catch (e) {
      print('‚ùå Error validating cart items: $e');
      return false;
    }
  }
}
