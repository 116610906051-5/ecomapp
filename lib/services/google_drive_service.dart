import 'dart:io';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:path/path.dart' as path;
import 'package:http_parser/http_parser.dart' as parser;

class GoogleDriveService {
  // Google Drive API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
  static const String _apiKey = 'AIzaSyBqjpapQ7wfraY2tLj09R6f7ych3riVPmc'; // API Key ‡∏à‡∏£‡∏¥‡∏á
  static const String _uploadUrl = 'https://www.googleapis.com/upload/drive/v3/files';
  
  // ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô Google Drive ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ
  static const String _productImagesFolderId = '1utmu9bohmbfeX5dn-utC7UA5ldZG_zi-'; // Folder ID ‡∏à‡∏£‡∏¥‡∏á

  /// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive
  static Future<String?> uploadImage(File imageFile, {String? fileName}) async {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
      fileName ??= '${DateTime.now().millisecondsSinceEpoch}_${path.basename(imageFile.path)}';
      
      print('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ: $fileName');

      // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
      final bytes = await imageFile.readAsBytes();

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
      final metadata = {
        'name': fileName,
        'parents': [_productImagesFolderId], // ‡πÉ‡∏™‡πà‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      };

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á multipart request
      final request = http.MultipartRequest(
        'POST',
        Uri.parse('$_uploadUrl?uploadType=multipart&key=$_apiKey'),
      );

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° metadata
      request.files.add(
        http.MultipartFile.fromString(
          'metadata',
          jsonEncode(metadata),
          contentType: parser.MediaType.parse('application/json; charset=UTF-8'),
        ),
      );

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ
      request.files.add(
        http.MultipartFile.fromBytes(
          'media',
          bytes,
          filename: fileName,
          contentType: parser.MediaType.parse(_getContentType(imageFile.path)),
        ),
      );

      // ‡∏™‡πà‡∏á request
      final response = await request.send();
      final responseBody = await response.stream.bytesToString();

      if (response.statusCode == 200) {
        final responseJson = jsonDecode(responseBody);
        final fileId = responseJson['id'];
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô public ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
        await _makeFilePublic(fileId);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á public URL
        final publicUrl = 'https://drive.google.com/uc?id=$fileId';
        
        print('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $publicUrl');
        return publicUrl;
      } else {
        print('‚ùå ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.statusCode}');
        print('Error: $responseBody');
        return null;
      }
    } catch (e) {
      print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î: $e');
      return null;
    }
  }

  /// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
  static Future<List<String>> uploadMultipleImages(List<File> imageFiles) async {
    final List<String> uploadedUrls = [];
    
    print('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î ${imageFiles.length} ‡∏£‡∏π‡∏õ...');
    
    for (int i = 0; i < imageFiles.length; i++) {
      final file = imageFiles[i];
      final fileName = 'product_${DateTime.now().millisecondsSinceEpoch}_${i + 1}${path.extension(file.path)}';
      
      final url = await uploadImage(file, fileName: fileName);
      if (url != null) {
        uploadedUrls.add(url);
      }
    }
    
    print('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ${uploadedUrls.length}/${imageFiles.length} ‡∏£‡∏π‡∏õ');
    return uploadedUrls;
  }

  /// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô public
  static Future<bool> _makeFilePublic(String fileId) async {
    try {
      final url = 'https://www.googleapis.com/drive/v3/files/$fileId/permissions?key=$_apiKey';
      
      final response = await http.post(
        Uri.parse(url),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'role': 'reader',
          'type': 'anyone',
        }),
      );

      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô public: $e');
      return false;
    }
  }

  /// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Content-Type ‡∏ï‡∏≤‡∏°‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
  static String _getContentType(String filePath) {
    final extension = path.extension(filePath).toLowerCase();
    switch (extension) {
      case '.jpg':
      case '.jpeg':
        return 'image/jpeg';
      case '.png':
        return 'image/png';
      case '.gif':
        return 'image/gif';
      case '.webp':
        return 'image/webp';
      default:
        return 'image/jpeg';
    }
  }

  /// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Google Drive
  static Future<bool> deleteFile(String fileId) async {
    try {
      final url = 'https://www.googleapis.com/drive/v3/files/$fileId?key=$_apiKey';
      
      final response = await http.delete(Uri.parse(url));
      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå: $e');
      return false;
    }
  }

  /// ‡πÅ‡∏õ‡∏•‡∏á Google Drive URL ‡πÄ‡∏õ‡πá‡∏ô File ID
  static String? extractFileIdFromUrl(String url) {
    final regex = RegExp(r'[?&]id=([a-zA-Z0-9_-]+)');
    final match = regex.firstMatch(url);
    return match?.group(1);
  }
}
